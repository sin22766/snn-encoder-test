import matplotlib.pyplot as plt
import seaborn as sns
import torch

__doc__ = """
This module contains functions for plotting the results of the EEG SNN encoder.
It includes functions to plot the training loss, accuracy, and confusion matrix.
"""


def plot_recon_compare(
    original_data: torch.Tensor, spike_data: torch.Tensor, decoded_data: torch.Tensor
):
    """
    Plot the original data, spike data, and decoded data for comparison.

    Parameters
    ----------
    original_data : torch.Tensor
        The original EEG data.
    spike_data : torch.Tensor
        The spike data generated by the SNN encoder.
    decoded_data : torch.Tensor
        The decoded data generated by the SNN decoder.
    """
    figs, axes = plt.subplots(3, 1, figsize=(10, 8))
    figs.set_tight_layout(True)
    figs.suptitle("Original, Spike, and Decoded Data Comparison", fontsize=16)

    decoded_len = decoded_data.shape[0] - 1
    spike_len = spike_data.shape[0] - 1

    axes[0].set_title("Encoded Spike Train")
    axes[0].set_xlabel("Timesteps")
    axes[0].set_ylabel("Spike")
    axes[0].set_xlim(0, spike_len)
    axes[0].stem(spike_data, markerfmt="none")

    axes[1].set_title("Original Signal")
    axes[1].set_xlabel("Timesteps")
    axes[1].set_ylabel("Amplitude")
    axes[1].set_xlim(0, decoded_len)
    sns.lineplot(original_data, ax=axes[1])

    axes[2].set_title("Decoded Signal")
    axes[2].set_xlabel("Timesteps")
    axes[2].set_ylabel("Amplitude")
    axes[2].set_xlim(0, decoded_len)
    sns.lineplot(decoded_data, ax=axes[2])
    plt.show()
